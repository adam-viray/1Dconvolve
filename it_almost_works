#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Convolution of time series Pe and unit hydrograph h
to produce outflow hydrograph
31 January 2021
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
plt.style.use("fivethirtyeight")

class Convolve():
    
    def __init__(self):
        self.Pe = [0, 10, 12, 3, 0, 5]
        self.h = [0.0, 0.5, 1.0, 1.3, 1.2, 0.8, 0.5, 0.2, 0.1, 0.0]
        self.width = len(self.h)
        self.length = len(self.Pe)
        self.h = np.pad(self.h, (self.length-1,self.length-1), mode='constant', constant_values=(0,0))
        self.out = np.zeros(len(self.h))
        self.kernel = np.pad(np.flip(self.Pe), (0,len(self.h)-self.length), mode='constant', constant_values=(0,0))
        self.i = 0
        
    def step(self):
        SIGMA = 0
        for n in range(self.length):
            SIGMA += self.Pe[n] * self.h[self.length - 1 - n + self.i]
        self.out[self.length + self.i - 1] = SIGMA
        self.kernel = np.insert(np.delete(self.kernel, -1), 0, 0)
        self.i += 1
        
def animate(f, C, axs):
    C.step()
    axs[1].clear()
    axs[0].bar(np.arange(len(C.h)), C.h, color='b')
    axs[1].bar(np.arange(len(C.kernel)), C.kernel, color='y')
    axs[2].bar(np.arange(len(C.out)), C.out, color='g')
    axs[1].xaxis.grid(False)
    axs[1].set_ylabel("Precipitation", fontsize=10)
    axs[1].set_xticklabels([])
    if C.i > 14:
        anim.event_source.stop()

def main():
    global anim
    C = Convolve()

    fig, axs = plt.subplots(nrows=3, sharex=True, gridspec_kw={'hspace': 0})
    fig.suptitle("1D convolution precipitation outflow")
    r1 = axs[0].bar(np.arange(len(C.h)), C.h, color='b')
    r2 = axs[1].bar(np.arange(len(C.h)), C.kernel, color='y')
    r3 = axs[2].bar(np.arange(len(C.h)), np.zeros(len(C.out)), color='g')
    axs[0].set_ylabel("Unit Hydrograph", fontsize=10)
    axs[1].set_ylabel("Precipitation", fontsize=10)
    axs[2].set_ylabel("Outflow", fontsize=10)
    for ax in axs:
        ax.label_outer()
        ax.xaxis.grid(False)
        ax.set_xticklabels([])
    
    anim = animation.FuncAnimation(fig, animate, interval=300, fargs=(C, axs))
    plt.show()

if __name__ == "__main__":
    main()
